[build-system]
requires = ["setuptools >= 45", "setuptools_scm[toml]>=6.2", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "pyclarity"
description = "Tools for the Clarity Challenge"
readme = "README.md"
license = { text = "MIT" }
dynamic = ["version"]
authors = [
    { name = "The PyClarity Team", email = "claritychallengecontact@gmail.com" },
]
classifiers = [
    "Intended Audience :: Developers",
    "Intended Audience :: Education",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Natural Language :: English",
]
keywords = ["hearing", "signal processing", "clarity challenge"]
requires-python = ">=3.9"
dependencies = [
    "audioread>=2.1.9",
    "gdown",
    "hydra-core>=1.1.1",
    "hydra-submitit-launcher>=1.1.6",
    "importlib-metadata",
    "librosa>=0.8.1",
    "matplotlib",
    "numba>=0.60",
    "numpy>=2",
    "omegaconf>=2.1.1",
    "pandas>=2.2.2",
    "pyflac",
    "pyloudnorm>=0.1.0",
    "pystoi",
    "pytorch-lightning",
    "resampy",
    "safetensors>=0.4.3",
    "scikit-learn>=1.0.2",
    "scipy>=1.7.3",
    "SoundFile>=0.10.3.post1",
    "soxr>=0.4",
    "torch>=2",
    "torchaudio",
    "tqdm>=4.62.3",
    "typing_extensions",
]

[project.optional-dependencies]
tests = [
    "coverage",
    "isort",
    "flake8",
    "flake8-print",
    "Flake8-pyproject",
    "mypy",
    "pre-commit",
    "py",
    "py-cpuinfo",
    "pytest",
    "pytest-cov",
    "pytest-mock",
    "pytest-mpl",
    "pytest-regtest",
    "pytest-skip-slow",
    "pytest-xdist",
    "yamllint",
]
docs = [
    "sphinx",
    "myst_parser",
    "pydata_sphinx_theme",
    "sphinx_markdown_tables",
    "sphinx_rtd_theme",
    "sphinxcontrib-mermaid",
    "sphinxcontrib-napoleon",
]
dev = [
    "black",
    "pre-commit",
    "pycodestyle",
    "pylint",
    "pylint-pytest",
    "yamllint",
]
pypi = ["build", "wheel", "setuptools_scm[toml]"]

[project.urls]
Source = "https://github.com/claritychallenge/clarity"
Bug_Tracker = "https://github.com/claritychallenge/clarity/issues"
Documentation = "https://claritychallenge.github.io/clarity_CC_doc"

[tool.setuptools]
# packages = ["clarity", "recipes"]
# packages = "find"
# py-modules = ["clarity", "recipes"]
include-package-data = true
#package-dir = ["clarity", "recipes"]

[tool.setuptools.packages.find]
include = ["clarity*", "recipes*"]
exclude = ["tests*"]
namespaces = false

[tool.setuptools.package-data]
clarity = ["*.json", "*.mat", "*.yaml"]
recipes = ["*.csv", "*.json", "*.mat", "*.yaml"]


[tool.setuptools_scm]
write_to = "clarity/_version.py"
version_scheme = "post-release"
local_scheme = "no-local-version"
git_describe_command = "git describe --tags"

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "--cov clarity"
testpaths = ["tests"]
filterwarnings = ["ignore::UserWarning"]

[tool.coverage.run]
source = ["clarity"]
omit = ["*conftest.py", "*tests*", "**/__init__*", "clarity/_version.py"]

[tool.black]
line-length = 88
target-version = ['py38']
exclude = '''

(
  /(
      \.eggs         # exclude a few common directories in the
    | \.git          # root of the project
    | \.venv
  )/
)
'''

[flake8]
ignore = ["E203", "E501", "W503"]
# docstring-convention = ""
max-line-length = 88
max-complexity = 18
select = ["B", "C", "E", "F", "W", "T4", "B9"]

[tool.ruff]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]
# per-file-ignores = []
line-length = 88
target-version = "py38"
select = ["B", "E", "F", "I001", "W"]
# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["A", "B", "C", "D", "E", "F", "R", "S", "W", "U"]

[tool.mypy]
ignore_missing_imports = true
exclude = ["docs/*", "build/*"]
